<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,cconner59-1.gce.cloudera.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(PORT,8889)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROT" elementType="Argument">
            <stringProp name="Argument.name">PROT</stringProp>
            <stringProp name="Argument.value">${__P(PROT,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SQLSTATEMENT" elementType="Argument">
            <stringProp name="Argument.name">SQLSTATEMENT</stringProp>
            <stringProp name="Argument.value">select * from default.sample_07 a , default.sample_08 te where trim(a.code) = trim(te.code) limit 100;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERSFILE" elementType="Argument">
            <stringProp name="Argument.name">USERSFILE</stringProp>
            <stringProp name="Argument.value">${__P(USERSFILE,/root/jmeter/bin/users.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IPSFILE" elementType="Argument">
            <stringProp name="Argument.name">IPSFILE</stringProp>
            <stringProp name="Argument.value">${__P(IPSFILE,/root/jmeter/bin/iplist.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(THREADS,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501099992000</longProp>
        <longProp name="ThreadGroup.end_time">1501099992000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROT}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.ipSource">${ADR_IP}</stringProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="X-CSRFToken" elementType="Cookie" testname="X-CSRFToken">
              <stringProp name="Cookie.value">${COOKIE_csrftoken}</stringProp>
              <stringProp name="Cookie.domain"></stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="csrfmiddlewaretoken" elementType="Cookie" testname="csrfmiddlewaretoken">
              <stringProp name="Cookie.value">${COOKIE_csrftoken}</stringProp>
              <stringProp name="Cookie.domain"></stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers"/>
        </HeaderManager>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command"></stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="snippet_value_id" elementType="Argument">
              <stringProp name="Argument.name">snippet_value_id</stringProp>
              <stringProp name="Argument.value">${__UUID}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="snippet_result_id" elementType="Argument">
              <stringProp name="Argument.name">snippet_result_id</stringProp>
              <stringProp name="Argument.value">${__UUID}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Login" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="72 /accounts/login/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/accounts/login/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/accounts/login/?next=/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="73 /accounts/login/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="csrfmiddlewaretoken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfmiddlewaretoken</stringProp>
                  <stringProp name="Argument.value">${COOKIE_csrftoken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${user}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">next</stringProp>
                  <stringProp name="Argument.value">/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/accounts/login/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/accounts/login/?next=/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="75 /hue/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/hue/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/accounts/login/?next=/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="ImpalaTest" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="72 /accounts/login/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/accounts/login/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/accounts/login/?next=/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="73 /accounts/login/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="csrfmiddlewaretoken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfmiddlewaretoken</stringProp>
                  <stringProp name="Argument.value">${COOKIE_csrftoken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${user}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">next</stringProp>
                  <stringProp name="Argument.value">/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/accounts/login/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/accounts/login/?next=/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="75 /hue/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/hue/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/accounts/login/?next=/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="113 /desktop/api2/get_config/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/desktop/api2/get_config/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="115 /notebook/api/create_notebook" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/create_notebook</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">notebookuuid1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.notebook.uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="117 /notebook/api/autocomplete/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;impala&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/autocomplete/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname"></stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery"></stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="119 /notebook/api/get_history" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="doc_text" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">doc_text</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="is_notification_manager" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_notification_manager</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/get_history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="121 /notebook/api/autocomplete/default" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;impala&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/autocomplete/default</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="124 /editor" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="is_embeddable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_embeddable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">impala</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1500247648223</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/editor</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">Hue</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html, */*; q=0.01</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="182 /notebook/api/create_notebook" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">impala</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="directory_uuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">directory_uuid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/create_notebook</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">notebookuuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.notebook.uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="184 /notebook/api/get_history" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="doc_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">doc_type</stringProp>
                  <stringProp name="Argument.value">impala</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="doc_text" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">doc_text</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="is_notification_manager" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_notification_manager</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1500247648225</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/get_history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="188 /notebook/api/check_status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_result_id}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/check_status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname"></stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery"></stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="190 /notebook/api/create_session" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:null,&quot;uuid&quot;:&quot;${notebookuuid}&quot;,&quot;parentSavedQueryUuid&quot;:null,&quot;isSaved&quot;:false,&quot;sessions&quot;:[],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;impala&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/create_session</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">session_httpaddr</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.http_addr</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">session_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="191 /notebook/api/execute/impala" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:null,&quot;uuid&quot;:&quot;${notebookuuid}&quot;,&quot;name&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;type&quot;:&quot;query-impala&quot;,&quot;coordinatorUuid&quot;:null,&quot;isHistory&quot;:false,&quot;isManaged&quot;:false,&quot;parentSavedQueryUuid&quot;:null,&quot;isSaved&quot;:false,&quot;onSuccessUrl&quot;:null,&quot;snippets&quot;:[{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;isBatchable&quot;:true,&quot;errors&quot;:[],&quot;aceErrorsHolder&quot;:[],&quot;aceWarningsHolder&quot;:[],&quot;aceErrors&quot;:[],&quot;aceWarnings&quot;:[],&quot;dbSelectionVisible&quot;:false,&quot;isSqlDialect&quot;:true,&quot;database&quot;:&quot;default&quot;,&quot;currentQueryTab&quot;:&quot;queryHistory&quot;,&quot;pinnedContextTabs&quot;:[],&quot;loadingQueries&quot;:false,&quot;queriesHasErrors&quot;:false,&quot;queriesCurrentPage&quot;:1,&quot;queriesTotalPages&quot;:0,&quot;queriesFilter&quot;:&quot;&quot;,&quot;queriesFilterVisible&quot;:false,&quot;statementType&quot;:&quot;text&quot;,&quot;statementTypes&quot;:[&quot;text&quot;,&quot;file&quot;],&quot;statementPath&quot;:&quot;&quot;,&quot;externalStatementLoaded&quot;:false,&quot;associatedDocumentLoading&quot;:true,&quot;associatedDocumentUuid&quot;:null,&quot;statement_raw&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;aceSize&quot;:100,&quot;status&quot;:&quot;running&quot;,&quot;statusForButtons&quot;:&quot;executing&quot;,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;viewSettings&quot;:{&quot;placeHolder&quot;:&quot;Example: SELECT * FROM tablename, or press CTRL + space&quot;,&quot;sqlDialect&quot;:true},&quot;variables&quot;:[],&quot;hasCurlyBracketParameters&quot;:true,&quot;variableNames&quot;:[],&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;hasResultset&quot;:true,&quot;handle&quot;:{},&quot;meta&quot;:[],&quot;rows&quot;:null,&quot;hasMore&quot;:false,&quot;statement_id&quot;:0,&quot;statement_range&quot;:{&quot;start&quot;:{&quot;row&quot;:0,&quot;column&quot;:0},&quot;end&quot;:{&quot;row&quot;:0,&quot;column&quot;:0}},&quot;statements_count&quot;:1,&quot;previous_statement_hash&quot;:null,&quot;metaFilter&quot;:&quot;&quot;,&quot;isMetaFilterVisible&quot;:false,&quot;filteredMetaChecked&quot;:true,&quot;filteredMeta&quot;:[],&quot;fetchedOnce&quot;:false,&quot;startTime&quot;:&quot;2017-07-18T14:19:24.377Z&quot;,&quot;endTime&quot;:&quot;2017-07-18T14:19:24.377Z&quot;,&quot;executionTime&quot;:0,&quot;data&quot;:[],&quot;explanation&quot;:&quot;&quot;,&quot;logs&quot;:&quot;&quot;,&quot;logLines&quot;:0,&quot;hasSomeResults&quot;:false},&quot;showGrid&quot;:true,&quot;showChart&quot;:false,&quot;showLogs&quot;:false,&quot;progress&quot;:0,&quot;jobs&quot;:[],&quot;isLoading&quot;:false,&quot;resultsKlass&quot;:&quot;results impala&quot;,&quot;errorsKlass&quot;:&quot;results impala alert alert-error&quot;,&quot;is_redacted&quot;:false,&quot;chartType&quot;:&quot;bars&quot;,&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null,&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimits&quot;:[5,10,25,50,100],&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartData&quot;:[],&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;hasDataForChart&quot;:false,&quot;previousChartOptions&quot;:{&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null},&quot;isResultSettingsVisible&quot;:false,&quot;settingsVisible&quot;:false,&quot;checkStatusTimeout&quot;:null,&quot;topRisk&quot;:null,&quot;suggestion&quot;:&quot;&quot;,&quot;hasSuggestion&quot;:null,&quot;complexityCheckRunning&quot;:false,&quot;compatibilityCheckRunning&quot;:false,&quot;compatibilitySourcePlatform&quot;:&quot;impala&quot;,&quot;compatibilitySourcePlatforms&quot;:[{&quot;name&quot;:&quot;Teradata&quot;,&quot;value&quot;:&quot;teradata&quot;},{&quot;name&quot;:&quot;Oracle&quot;,&quot;value&quot;:&quot;oracle&quot;},{&quot;name&quot;:&quot;Netezza&quot;,&quot;value&quot;:&quot;netezza&quot;},{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;},{&quot;name&quot;:&quot;DB2&quot;,&quot;value&quot;:&quot;db2&quot;},{&quot;name&quot;:&quot;Greenplum&quot;,&quot;value&quot;:&quot;greenplum&quot;},{&quot;name&quot;:&quot;MySQL&quot;,&quot;value&quot;:&quot;mysql&quot;},{&quot;name&quot;:&quot;PostgreSQL&quot;,&quot;value&quot;:&quot;postgresql&quot;},{&quot;name&quot;:&quot;Informix&quot;,&quot;value&quot;:&quot;informix&quot;},{&quot;name&quot;:&quot;SQL Server&quot;,&quot;value&quot;:&quot;sqlserver&quot;},{&quot;name&quot;:&quot;Sybase&quot;,&quot;value&quot;:&quot;sybase&quot;},{&quot;name&quot;:&quot;Access&quot;,&quot;value&quot;:&quot;access&quot;},{&quot;name&quot;:&quot;Firebird&quot;,&quot;value&quot;:&quot;firebird&quot;},{&quot;name&quot;:&quot;ANSISQL&quot;,&quot;value&quot;:&quot;ansisql&quot;},{&quot;name&quot;:&quot;Generic&quot;,&quot;value&quot;:&quot;generic&quot;}],&quot;compatibilityTargetPlatform&quot;:&quot;impala&quot;,&quot;compatibilityTargetPlatforms&quot;:[{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;}],&quot;showOptimizer&quot;:false,&quot;wasBatchExecuted&quot;:false,&quot;isReady&quot;:true,&quot;lastExecuted&quot;:1500387564375,&quot;executingBlockingOperation&quot;:null,&quot;showLongOperationWarning&quot;:false,&quot;formatEnabled&quot;:true,&quot;isFetchingData&quot;:false,&quot;isCanceling&quot;:false}],&quot;selectedSnippet&quot;:&quot;impala&quot;,&quot;creatingSessionLocks&quot;:[],&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:${session_id}}],&quot;directoryUuid&quot;:&quot;&quot;,&quot;dependentsCoordinator&quot;:[],&quot;historyFilter&quot;:&quot;&quot;,&quot;historyFilterVisible&quot;:false,&quot;loadingHistory&quot;:false,&quot;historyCurrentPage&quot;:1,&quot;historyTotalPages&quot;:0,&quot;schedulerViewModel&quot;:null,&quot;schedulerViewModelIsLoaded&quot;:false,&quot;isBatchable&quot;:true,&quot;retryModalConfirm&quot;:null,&quot;retryModalCancel&quot;:null,&quot;unloaded&quot;:false,&quot;updateHistoryFailed&quot;:false,&quot;viewSchedulerId&quot;:&quot;&quot;,&quot;loadingScheduler&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;status&quot;:&quot;running&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="notebook2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">notebook:{&quot;id&quot;:null,&quot;uuid&quot;:&quot;c702c6d8-6507-4af6-9a3e-76dd265b41ad&quot;,&quot;name&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;type&quot;:&quot;query-impala&quot;,&quot;coordinatorUuid&quot;:null,&quot;isHistory&quot;:false,&quot;isManaged&quot;:false,&quot;parentSavedQueryUuid&quot;:null,&quot;isSaved&quot;:false,&quot;onSuccessUrl&quot;:null,&quot;snippets&quot;:[{&quot;id&quot;:&quot;d1429293-ca29-3d00-1e33-e5f063956792&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;isBatchable&quot;:true,&quot;errors&quot;:[],&quot;aceErrorsHolder&quot;:[],&quot;aceWarningsHolder&quot;:[],&quot;aceErrors&quot;:[],&quot;aceWarnings&quot;:[],&quot;dbSelectionVisible&quot;:false,&quot;isSqlDialect&quot;:true,&quot;database&quot;:&quot;default&quot;,&quot;currentQueryTab&quot;:&quot;queryHistory&quot;,&quot;pinnedContextTabs&quot;:[],&quot;loadingQueries&quot;:false,&quot;queriesHasErrors&quot;:false,&quot;queriesCurrentPage&quot;:1,&quot;queriesTotalPages&quot;:1,&quot;queriesFilter&quot;:&quot;&quot;,&quot;queriesFilterVisible&quot;:false,&quot;statementType&quot;:&quot;text&quot;,&quot;statementTypes&quot;:[&quot;text&quot;,&quot;file&quot;],&quot;statementPath&quot;:&quot;&quot;,&quot;externalStatementLoaded&quot;:false,&quot;associatedDocumentLoading&quot;:true,&quot;associatedDocumentUuid&quot;:null,&quot;statement_raw&quot;:&quot;SELECT * FROM sample_07;&quot;,&quot;aceSize&quot;:100,&quot;status&quot;:&quot;running&quot;,&quot;statusForButtons&quot;:&quot;executing&quot;,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;viewSettings&quot;:{&quot;placeHolder&quot;:&quot;Example: SELECT * FROM tablename, or press CTRL + space&quot;,&quot;sqlDialect&quot;:true},&quot;variables&quot;:[],&quot;hasCurlyBracketParameters&quot;:true,&quot;variableNames&quot;:[],&quot;statement&quot;:&quot;SELECT * FROM sample_07;&quot;,&quot;result&quot;:{&quot;id&quot;:&quot;e07bff99-9d65-c1e9-562b-38debe1c7225&quot;,&quot;type&quot;:&quot;table&quot;,&quot;hasResultset&quot;:true,&quot;handle&quot;:{},&quot;meta&quot;:[],&quot;rows&quot;:null,&quot;hasMore&quot;:false,&quot;statement_id&quot;:0,&quot;statement_range&quot;:{&quot;start&quot;:{&quot;row&quot;:0,&quot;column&quot;:0},&quot;end&quot;:{&quot;row&quot;:0,&quot;column&quot;:0}},&quot;statements_count&quot;:1,&quot;previous_statement_hash&quot;:null,&quot;metaFilter&quot;:&quot;&quot;,&quot;isMetaFilterVisible&quot;:false,&quot;filteredMetaChecked&quot;:true,&quot;filteredMeta&quot;:[],&quot;fetchedOnce&quot;:false,&quot;startTime&quot;:&quot;2017-07-31T18:14:37.537Z&quot;,&quot;endTime&quot;:&quot;2017-07-31T18:14:37.537Z&quot;,&quot;executionTime&quot;:0,&quot;data&quot;:[],&quot;explanation&quot;:&quot;&quot;,&quot;logs&quot;:&quot;&quot;,&quot;logLines&quot;:0,&quot;hasSomeResults&quot;:false},&quot;showGrid&quot;:true,&quot;showChart&quot;:false,&quot;showLogs&quot;:false,&quot;progress&quot;:0,&quot;jobs&quot;:[],&quot;isLoading&quot;:false,&quot;resultsKlass&quot;:&quot;results impala&quot;,&quot;errorsKlass&quot;:&quot;results impala alert alert-error&quot;,&quot;is_redacted&quot;:false,&quot;chartType&quot;:&quot;bars&quot;,&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null,&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimits&quot;:[5,10,25,50,100],&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartData&quot;:[],&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;hasDataForChart&quot;:false,&quot;previousChartOptions&quot;:{&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null},&quot;isResultSettingsVisible&quot;:false,&quot;settingsVisible&quot;:false,&quot;checkStatusTimeout&quot;:null,&quot;topRisk&quot;:null,&quot;suggestion&quot;:&quot;&quot;,&quot;hasSuggestion&quot;:null,&quot;complexityCheckRunning&quot;:false,&quot;compatibilityCheckRunning&quot;:false,&quot;compatibilitySourcePlatform&quot;:&quot;impala&quot;,&quot;compatibilitySourcePlatforms&quot;:[{&quot;name&quot;:&quot;Teradata&quot;,&quot;value&quot;:&quot;teradata&quot;},{&quot;name&quot;:&quot;Oracle&quot;,&quot;value&quot;:&quot;oracle&quot;},{&quot;name&quot;:&quot;Netezza&quot;,&quot;value&quot;:&quot;netezza&quot;},{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;},{&quot;name&quot;:&quot;DB2&quot;,&quot;value&quot;:&quot;db2&quot;},{&quot;name&quot;:&quot;Greenplum&quot;,&quot;value&quot;:&quot;greenplum&quot;},{&quot;name&quot;:&quot;MySQL&quot;,&quot;value&quot;:&quot;mysql&quot;},{&quot;name&quot;:&quot;PostgreSQL&quot;,&quot;value&quot;:&quot;postgresql&quot;},{&quot;name&quot;:&quot;Informix&quot;,&quot;value&quot;:&quot;informix&quot;},{&quot;name&quot;:&quot;SQL Server&quot;,&quot;value&quot;:&quot;sqlserver&quot;},{&quot;name&quot;:&quot;Sybase&quot;,&quot;value&quot;:&quot;sybase&quot;},{&quot;name&quot;:&quot;Access&quot;,&quot;value&quot;:&quot;access&quot;},{&quot;name&quot;:&quot;Firebird&quot;,&quot;value&quot;:&quot;firebird&quot;},{&quot;name&quot;:&quot;ANSISQL&quot;,&quot;value&quot;:&quot;ansisql&quot;},{&quot;name&quot;:&quot;Generic&quot;,&quot;value&quot;:&quot;generic&quot;}],&quot;compatibilityTargetPlatform&quot;:&quot;impala&quot;,&quot;compatibilityTargetPlatforms&quot;:[{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;}],&quot;showOptimizer&quot;:false,&quot;wasBatchExecuted&quot;:false,&quot;isReady&quot;:true,&quot;lastExecuted&quot;:1501524877531,&quot;executingBlockingOperation&quot;:null,&quot;showLongOperationWarning&quot;:false,&quot;formatEnabled&quot;:true,&quot;isFetchingData&quot;:false,&quot;isCanceling&quot;:false}],&quot;selectedSnippet&quot;:&quot;impala&quot;,&quot;creatingSessionLocks&quot;:[],&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;https://anu-test-2.gce.cloudera.com:25000&quot;,&quot;id&quot;:14}],&quot;directoryUuid&quot;:&quot;&quot;,&quot;dependentsCoordinator&quot;:[],&quot;historyFilter&quot;:&quot;&quot;,&quot;historyFilterVisible&quot;:false,&quot;loadingHistory&quot;:false,&quot;historyCurrentPage&quot;:1,&quot;historyTotalPages&quot;:2,&quot;schedulerViewModel&quot;:null,&quot;schedulerViewModelIsLoaded&quot;:false,&quot;isBatchable&quot;:true,&quot;retryModalConfirm&quot;:null,&quot;retryModalCancel&quot;:null,&quot;unloaded&quot;:false,&quot;updateHistoryFailed&quot;:false,&quot;viewSchedulerId&quot;:&quot;&quot;,&quot;loadingScheduler&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">notebook2</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/execute/impala</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">			</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">history_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.history_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">secret1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.handle.secret</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">session_guid1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.handle.session_guid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">previous_statement_hash</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.handle.previous_statement_hash</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">history_uuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.history_uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">secret</stringProp>
              <stringProp name="RegexExtractor.regex">([^=].*==)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">secret1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">session_guid</stringProp>
              <stringProp name="RegexExtractor.regex">([^=].*==)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">session_guid1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="192 /notebook/api/check_status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${history_id}&quot;,&quot;uuid&quot;:&quot;${history_uuid}&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:&quot;${session_id}&quot;}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;status&quot;:&quot;running&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;${secret}&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;${session_guid}&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;${secret}&quot;,&quot;previous_statement_hash&quot;:&quot;${previous_statement_hash}&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/check_status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="193 /notebook/api/get_logs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:${history_id},&quot;uuid&quot;:&quot;${history_uuid}&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:${session_id}}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;status&quot;:&quot;running&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;${secret}\n&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;${session_guid}\n&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;${secret}\n&quot;,&quot;previous_statement_hash&quot;:&quot;${previous_statement_hash}&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="from" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">from</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jobs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jobs</stringProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="full_log" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">full_log</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/get_logs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=11</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="194 /notebook/api/fetch_result_data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:${history_id},&quot;uuid&quot;:&quot;${history_uuid}&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:${session_id}}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;status&quot;:&quot;available&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;${secret}&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;${session_guid}&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;${secret}&quot;,&quot;previous_statement_hash&quot;:&quot;${previous_statement_hash}&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rows" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rows</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOver" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startOver</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/fetch_result_data</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain, */*; q=0.01</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="198 /notebook/api/fetch_result_size" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:11,&quot;uuid&quot;:&quot;80eddb43-5641-4b3a-926c-cc4e74c0be14&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;http://nightly-unsecure-2.gce.cloudera.com:25000&quot;,&quot;id&quot;:2}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;f1e587b7-a57d-fb14-920c-11172c9f07ad&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;status&quot;:&quot;available&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;ca7db390-ae64-137e-6c84-131aa7927d4a&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;ciQJ3bMlTnS3SvSo3WkjzQ==\n&quot;,&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;previous_statement_hash&quot;:&quot;653818656ec4474712cde06694880c2f7ba5e6147d84ebade7f91882&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/fetch_result_size</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="199 /notebook/api/notebook/close" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:11,&quot;uuid&quot;:&quot;80eddb43-5641-4b3a-926c-cc4e74c0be14&quot;,&quot;name&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;type&quot;:&quot;query-impala&quot;,&quot;coordinatorUuid&quot;:null,&quot;isHistory&quot;:true,&quot;isManaged&quot;:false,&quot;isSaved&quot;:false,&quot;onSuccessUrl&quot;:null,&quot;snippets&quot;:[{&quot;id&quot;:&quot;f1e587b7-a57d-fb14-920c-11172c9f07ad&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;isBatchable&quot;:true,&quot;errors&quot;:[],&quot;aceErrorsHolder&quot;:[],&quot;aceWarningsHolder&quot;:[],&quot;aceErrors&quot;:[],&quot;aceWarnings&quot;:[],&quot;dbSelectionVisible&quot;:false,&quot;isSqlDialect&quot;:true,&quot;database&quot;:&quot;default&quot;,&quot;currentQueryTab&quot;:&quot;queryResults&quot;,&quot;pinnedContextTabs&quot;:[],&quot;loadingQueries&quot;:false,&quot;queriesHasErrors&quot;:false,&quot;queriesCurrentPage&quot;:1,&quot;queriesTotalPages&quot;:1,&quot;queriesFilter&quot;:&quot;&quot;,&quot;queriesFilterVisible&quot;:false,&quot;statementType&quot;:&quot;text&quot;,&quot;statementTypes&quot;:[&quot;text&quot;,&quot;file&quot;],&quot;statementPath&quot;:&quot;&quot;,&quot;externalStatementLoaded&quot;:false,&quot;associatedDocumentLoading&quot;:true,&quot;associatedDocumentUuid&quot;:null,&quot;statement_raw&quot;:&quot;SELECT * FROM customers&quot;,&quot;aceSize&quot;:100,&quot;status&quot;:&quot;available&quot;,&quot;statusForButtons&quot;:&quot;executed&quot;,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;viewSettings&quot;:{&quot;placeHolder&quot;:&quot;Example: SELECT * FROM tablename, or press CTRL + space&quot;,&quot;sqlDialect&quot;:true},&quot;variables&quot;:[],&quot;hasCurlyBracketParameters&quot;:true,&quot;variableNames&quot;:[],&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;result&quot;:{&quot;id&quot;:&quot;ca7db390-ae64-137e-6c84-131aa7927d4a&quot;,&quot;type&quot;:&quot;table&quot;,&quot;hasResultset&quot;:true,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;ciQJ3bMlTnS3SvSo3WkjzQ==\n&quot;,&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;previous_statement_hash&quot;:&quot;653818656ec4474712cde06694880c2f7ba5e6147d84ebade7f91882&quot;},&quot;meta&quot;:[{&quot;type&quot;:&quot;INT_TYPE&quot;,&quot;name&quot;:&quot;&quot;,&quot;comment&quot;:null,&quot;cssClass&quot;:&quot;sort-numeric&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:0},{&quot;comment&quot;:null,&quot;type&quot;:&quot;INT_TYPE&quot;,&quot;name&quot;:&quot;id&quot;,&quot;cssClass&quot;:&quot;sort-numeric&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:1},{&quot;comment&quot;:null,&quot;type&quot;:&quot;STRING_TYPE&quot;,&quot;name&quot;:&quot;name&quot;,&quot;cssClass&quot;:&quot;sort-string&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:2}],&quot;rows&quot;:53,&quot;hasMore&quot;:false,&quot;statement_id&quot;:0,&quot;statement_range&quot;:{&quot;start&quot;:{&quot;row&quot;:0,&quot;column&quot;:0},&quot;end&quot;:{&quot;row&quot;:0,&quot;column&quot;:0}},&quot;statements_count&quot;:1,&quot;metaFilter&quot;:&quot;&quot;,&quot;isMetaFilterVisible&quot;:false,&quot;filteredMetaChecked&quot;:true,&quot;filteredMeta&quot;:[{&quot;comment&quot;:null,&quot;type&quot;:&quot;INT_TYPE&quot;,&quot;name&quot;:&quot;id&quot;,&quot;cssClass&quot;:&quot;sort-numeric&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:1},{&quot;comment&quot;:null,&quot;type&quot;:&quot;STRING_TYPE&quot;,&quot;name&quot;:&quot;name&quot;,&quot;cssClass&quot;:&quot;sort-string&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:2}],&quot;fetchedOnce&quot;:true,&quot;startTime&quot;:&quot;2017-07-16T23:27:51.795Z&quot;,&quot;endTime&quot;:&quot;2017-07-16T23:27:51.796Z&quot;,&quot;executionTime&quot;:1,&quot;data&quot;:[[1,75012,&quot;Dorothy&amp;nbsp;Wilk&quot;],[2,17254,&quot;Martin&amp;nbsp;Johnson&quot;],[3,12532,&quot;Melvin&amp;nbsp;Garcia&quot;],[4,42632,&quot;Raymond&amp;nbsp;S.&amp;nbsp;Vestal&quot;],[5,77913,&quot;Betty&amp;nbsp;J.&amp;nbsp;Giambrone&quot;],[6,38807,&quot;Rebecca&amp;nbsp;T.&amp;nbsp;Johnson&quot;],[7,71843,&quot;David&amp;nbsp;B.&amp;nbsp;Allison&quot;],[8,67099,&quot;Jay&amp;nbsp;N.&amp;nbsp;Weaver&quot;],[9,83510,&quot;Carol&amp;nbsp;B.&amp;nbsp;Houser&quot;],[10,48072,&quot;Octaviana&amp;nbsp;Guiterrez&quot;],[11,89830,&quot;Michelle&amp;nbsp;Coffman&quot;],[12,98751,&quot;Heather&amp;nbsp;L.&amp;nbsp;Southerland&quot;],[13,88702,&quot;Diane&amp;nbsp;Lee&quot;],[14,80283,&quot;Angela&amp;nbsp;Perez&quot;],[15,48153,&quot;Caroline&amp;nbsp;R.&amp;nbsp;Ehlert&quot;],[16,54362,&quot;David&amp;nbsp;Hallifax&quot;],[17,10326,&quot;Annie&amp;nbsp;Sanchez&quot;],[18,13106,&quot;Lindsey&amp;nbsp;Jarrett&quot;],[19,90326,&quot;Alyssa&amp;nbsp;R.&amp;nbsp;Banks&quot;],[20,69735,&quot;Tracy&amp;nbsp;Wong&quot;],[21,54288,&quot;Julia&amp;nbsp;Allen&quot;],[22,94802,&quot;William&amp;nbsp;S.&amp;nbsp;Pollard&quot;],[23,17307,&quot;Mohammed&amp;nbsp;B.&amp;nbsp;Sanderlin&quot;],[24,74640,&quot;Kenneth&amp;nbsp;E.&amp;nbsp;Pendelton&quot;],[25,54954,&quot;Michael&amp;nbsp;Carnes&quot;],[26,93508,&quot;Olivia&amp;nbsp;Powers&quot;],[27,35241,&quot;Craig&amp;nbsp;S.&amp;nbsp;Motley&quot;],[28,63835,&quot;Adolfo&amp;nbsp;A.&amp;nbsp;Lieb&quot;],[29,63705,&quot;Meghan&amp;nbsp;Dickinson&quot;],[30,42109,&quot;Pamela&amp;nbsp;C.&amp;nbsp;McMillan&quot;],[31,76678,&quot;Raymond&amp;nbsp;K.&amp;nbsp;Long&quot;],[32,70420,&quot;Terri&amp;nbsp;W.&amp;nbsp;Katz&quot;],[33,64109,&quot;Jo&amp;nbsp;Walsh&quot;],[34,38715,&quot;Mary&amp;nbsp;M.&amp;nbsp;Henderson&quot;],[35,66109,&quot;Gilberto&amp;nbsp;Franklin&quot;],[36,62346,&quot;Jeanetta&amp;nbsp;Aquino&quot;],[37,10271,&quot;Eric&amp;nbsp;Cobb&quot;],[38,79468,&quot;John&amp;nbsp;Healy&quot;],[39,72104,&quot;Andrew&amp;nbsp;Wyatt&quot;],[40,21216,&quot;Elda&amp;nbsp;Fanning&quot;],[41,71267,&quot;Robin&amp;nbsp;T.&amp;nbsp;Vanauken&quot;],[42,17296,&quot;Michael&amp;nbsp;B.&amp;nbsp;Hill&quot;],[43,31457,&quot;David&amp;nbsp;Bryant&quot;],[44,77672,&quot;Randy&amp;nbsp;Peterson&quot;],[45,82429,&quot;Justine&amp;nbsp;Roth&quot;],[46,86050,&quot;Sheera&amp;nbsp;McNeil&quot;],[47,71230,&quot;Alicia&amp;nbsp;C.&amp;nbsp;Torrence&quot;],[48,84324,&quot;Mae&amp;nbsp;White&quot;],[49,36656,&quot;Anthony&amp;nbsp;A.&amp;nbsp;Davis&quot;],[50,91215,&quot;Richard&amp;nbsp;Baird&quot;],[51,68381,&quot;Beatrice&amp;nbsp;Goodwin&quot;],[52,50951,&quot;Elaine&amp;nbsp;Meikle&quot;],[53,36925,&quot;Maria&amp;nbsp;Calderon&quot;]],&quot;explanation&quot;:&quot;&quot;,&quot;logs&quot;:&quot;Query 1b4c8bfe3d1dd31c:df2e501600000000 100% Complete (1 out of 1)&quot;,&quot;logLines&quot;:1,&quot;hasSomeResults&quot;:true},&quot;showGrid&quot;:true,&quot;showChart&quot;:false,&quot;showLogs&quot;:false,&quot;progress&quot;:0,&quot;jobs&quot;:[],&quot;isLoading&quot;:false,&quot;resultsKlass&quot;:&quot;results impala&quot;,&quot;errorsKlass&quot;:&quot;results impala alert alert-error&quot;,&quot;is_redacted&quot;:false,&quot;chartType&quot;:&quot;bars&quot;,&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null,&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimits&quot;:[5,10,25,50,100],&quot;chartLimit&quot;:null,&quot;chartX&quot;:&quot;name&quot;,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartYMulti&quot;:[&quot;id&quot;],&quot;chartData&quot;:[],&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;hasDataForChart&quot;:true,&quot;previousChartOptions&quot;:{&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null},&quot;isResultSettingsVisible&quot;:false,&quot;settingsVisible&quot;:false,&quot;checkStatusTimeout&quot;:null,&quot;topRisk&quot;:null,&quot;suggestion&quot;:&quot;&quot;,&quot;hasSuggestion&quot;:null,&quot;complexityCheckRunning&quot;:false,&quot;compatibilityCheckRunning&quot;:false,&quot;compatibilitySourcePlatform&quot;:&quot;impala&quot;,&quot;compatibilitySourcePlatforms&quot;:[{&quot;name&quot;:&quot;Teradata&quot;,&quot;value&quot;:&quot;teradata&quot;},{&quot;name&quot;:&quot;Oracle&quot;,&quot;value&quot;:&quot;oracle&quot;},{&quot;name&quot;:&quot;Netezza&quot;,&quot;value&quot;:&quot;netezza&quot;},{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;},{&quot;name&quot;:&quot;DB2&quot;,&quot;value&quot;:&quot;db2&quot;},{&quot;name&quot;:&quot;Greenplum&quot;,&quot;value&quot;:&quot;greenplum&quot;},{&quot;name&quot;:&quot;MySQL&quot;,&quot;value&quot;:&quot;mysql&quot;},{&quot;name&quot;:&quot;PostgreSQL&quot;,&quot;value&quot;:&quot;postgresql&quot;},{&quot;name&quot;:&quot;Informix&quot;,&quot;value&quot;:&quot;informix&quot;},{&quot;name&quot;:&quot;SQL Server&quot;,&quot;value&quot;:&quot;sqlserver&quot;},{&quot;name&quot;:&quot;Sybase&quot;,&quot;value&quot;:&quot;sybase&quot;},{&quot;name&quot;:&quot;Access&quot;,&quot;value&quot;:&quot;access&quot;},{&quot;name&quot;:&quot;Firebird&quot;,&quot;value&quot;:&quot;firebird&quot;},{&quot;name&quot;:&quot;ANSISQL&quot;,&quot;value&quot;:&quot;ansisql&quot;},{&quot;name&quot;:&quot;Generic&quot;,&quot;value&quot;:&quot;generic&quot;}],&quot;compatibilityTargetPlatform&quot;:&quot;impala&quot;,&quot;compatibilityTargetPlatforms&quot;:[{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;}],&quot;showOptimizer&quot;:false,&quot;wasBatchExecuted&quot;:false,&quot;isReady&quot;:true,&quot;lastExecuted&quot;:1500247671767,&quot;executingBlockingOperation&quot;:null,&quot;showLongOperationWarning&quot;:false,&quot;formatEnabled&quot;:true,&quot;isFetchingData&quot;:false,&quot;isCanceling&quot;:false}],&quot;selectedSnippet&quot;:&quot;impala&quot;,&quot;creatingSessionLocks&quot;:[],&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;http://nightly-unsecure-2.gce.cloudera.com:25000&quot;,&quot;id&quot;:2}],&quot;directoryUuid&quot;:&quot;&quot;,&quot;dependentsCoordinator&quot;:[],&quot;historyFilter&quot;:&quot;&quot;,&quot;historyFilterVisible&quot;:false,&quot;loadingHistory&quot;:false,&quot;historyCurrentPage&quot;:1,&quot;historyTotalPages&quot;:1,&quot;schedulerViewModel&quot;:null,&quot;schedulerViewModelIsLoaded&quot;:false,&quot;isBatchable&quot;:true,&quot;retryModalConfirm&quot;:null,&quot;retryModalCancel&quot;:null,&quot;unloaded&quot;:false,&quot;updateHistoryFailed&quot;:false,&quot;viewSchedulerId&quot;:&quot;&quot;,&quot;loadingScheduler&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="editorMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">editorMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/notebook/close</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
	<RecordingController guiclass="RecordController" testclass="RecordingController" testname="HiveTest" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="113 /desktop/api2/get_config/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/desktop/api2/get_config/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="115 /notebook/api/create_notebook" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">hive</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="directory_uuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">directory_uuid</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/create_notebook</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">notebookuuid1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.notebook.uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="117 /notebook/api/autocomplete/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;hive&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/autocomplete/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname"></stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery"></stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="119 /notebook/api/get_history" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="doc_text" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">doc_text</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="is_notification_manager" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_notification_manager</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/get_history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="121 /notebook/api/autocomplete/default" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;hive&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/autocomplete/default</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="124 /editor" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="is_embeddable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_embeddable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">hive</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1500247648223</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/editor</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">Hue</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html, */*; q=0.01</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="182 /notebook/api/create_notebook" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">hive</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="directory_uuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">directory_uuid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/create_notebook</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">notebookuuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.notebook.uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="184 /notebook/api/get_history" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="doc_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">doc_type</stringProp>
                  <stringProp name="Argument.value">hive</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="doc_text" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">doc_text</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="is_notification_manager" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is_notification_manager</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_</stringProp>
                  <stringProp name="Argument.value">1500247648225</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/get_history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="188 /notebook/api/check_status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_result_id}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/check_status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname"></stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery"></stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="190 /notebook/api/create_session" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:null,&quot;uuid&quot;:&quot;${notebookuuid}&quot;,&quot;parentSavedQueryUuid&quot;:null,&quot;isSaved&quot;:false,&quot;sessions&quot;:[],&quot;type&quot;:&quot;query-hive&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="session" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">session</stringProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;hive&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/create_session</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">session_httpaddr</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.http_addr</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">session_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="191 /notebook/api/execute/impala" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:null,&quot;uuid&quot;:&quot;${notebookuuid}&quot;,&quot;name&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;type&quot;:&quot;query-hive&quot;,&quot;coordinatorUuid&quot;:null,&quot;isHistory&quot;:false,&quot;isManaged&quot;:false,&quot;parentSavedQueryUuid&quot;:null,&quot;isSaved&quot;:false,&quot;onSuccessUrl&quot;:null,&quot;snippets&quot;:[{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;isBatchable&quot;:true,&quot;errors&quot;:[],&quot;aceErrorsHolder&quot;:[],&quot;aceWarningsHolder&quot;:[],&quot;aceErrors&quot;:[],&quot;aceWarnings&quot;:[],&quot;dbSelectionVisible&quot;:false,&quot;isSqlDialect&quot;:true,&quot;database&quot;:&quot;default&quot;,&quot;currentQueryTab&quot;:&quot;queryHistory&quot;,&quot;pinnedContextTabs&quot;:[],&quot;loadingQueries&quot;:false,&quot;queriesHasErrors&quot;:false,&quot;queriesCurrentPage&quot;:1,&quot;queriesTotalPages&quot;:0,&quot;queriesFilter&quot;:&quot;&quot;,&quot;queriesFilterVisible&quot;:false,&quot;statementType&quot;:&quot;text&quot;,&quot;statementTypes&quot;:[&quot;text&quot;,&quot;file&quot;],&quot;statementPath&quot;:&quot;&quot;,&quot;externalStatementLoaded&quot;:false,&quot;associatedDocumentLoading&quot;:true,&quot;associatedDocumentUuid&quot;:null,&quot;statement_raw&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;aceSize&quot;:100,&quot;status&quot;:&quot;running&quot;,&quot;statusForButtons&quot;:&quot;executing&quot;,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;viewSettings&quot;:{&quot;placeHolder&quot;:&quot;Example: SELECT * FROM tablename, or press CTRL + space&quot;,&quot;sqlDialect&quot;:true},&quot;variables&quot;:[],&quot;hasCurlyBracketParameters&quot;:true,&quot;variableNames&quot;:[],&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;hasResultset&quot;:true,&quot;handle&quot;:{},&quot;meta&quot;:[],&quot;rows&quot;:null,&quot;hasMore&quot;:false,&quot;statement_id&quot;:0,&quot;statement_range&quot;:{&quot;start&quot;:{&quot;row&quot;:0,&quot;column&quot;:0},&quot;end&quot;:{&quot;row&quot;:0,&quot;column&quot;:0}},&quot;statements_count&quot;:1,&quot;previous_statement_hash&quot;:null,&quot;metaFilter&quot;:&quot;&quot;,&quot;isMetaFilterVisible&quot;:false,&quot;filteredMetaChecked&quot;:true,&quot;filteredMeta&quot;:[],&quot;fetchedOnce&quot;:false,&quot;startTime&quot;:&quot;2017-07-18T14:19:24.377Z&quot;,&quot;endTime&quot;:&quot;2017-07-18T14:19:24.377Z&quot;,&quot;executionTime&quot;:0,&quot;data&quot;:[],&quot;explanation&quot;:&quot;&quot;,&quot;logs&quot;:&quot;&quot;,&quot;logLines&quot;:0,&quot;hasSomeResults&quot;:false},&quot;showGrid&quot;:true,&quot;showChart&quot;:false,&quot;showLogs&quot;:false,&quot;progress&quot;:0,&quot;jobs&quot;:[],&quot;isLoading&quot;:false,&quot;resultsKlass&quot;:&quot;results impala&quot;,&quot;errorsKlass&quot;:&quot;results impala alert alert-error&quot;,&quot;is_redacted&quot;:false,&quot;chartType&quot;:&quot;bars&quot;,&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null,&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimits&quot;:[5,10,25,50,100],&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartData&quot;:[],&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;hasDataForChart&quot;:false,&quot;previousChartOptions&quot;:{&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null},&quot;isResultSettingsVisible&quot;:false,&quot;settingsVisible&quot;:false,&quot;checkStatusTimeout&quot;:null,&quot;topRisk&quot;:null,&quot;suggestion&quot;:&quot;&quot;,&quot;hasSuggestion&quot;:null,&quot;complexityCheckRunning&quot;:false,&quot;compatibilityCheckRunning&quot;:false,&quot;compatibilitySourcePlatform&quot;:&quot;impala&quot;,&quot;compatibilitySourcePlatforms&quot;:[{&quot;name&quot;:&quot;Teradata&quot;,&quot;value&quot;:&quot;teradata&quot;},{&quot;name&quot;:&quot;Oracle&quot;,&quot;value&quot;:&quot;oracle&quot;},{&quot;name&quot;:&quot;Netezza&quot;,&quot;value&quot;:&quot;netezza&quot;},{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;},{&quot;name&quot;:&quot;DB2&quot;,&quot;value&quot;:&quot;db2&quot;},{&quot;name&quot;:&quot;Greenplum&quot;,&quot;value&quot;:&quot;greenplum&quot;},{&quot;name&quot;:&quot;MySQL&quot;,&quot;value&quot;:&quot;mysql&quot;},{&quot;name&quot;:&quot;PostgreSQL&quot;,&quot;value&quot;:&quot;postgresql&quot;},{&quot;name&quot;:&quot;Informix&quot;,&quot;value&quot;:&quot;informix&quot;},{&quot;name&quot;:&quot;SQL Server&quot;,&quot;value&quot;:&quot;sqlserver&quot;},{&quot;name&quot;:&quot;Sybase&quot;,&quot;value&quot;:&quot;sybase&quot;},{&quot;name&quot;:&quot;Access&quot;,&quot;value&quot;:&quot;access&quot;},{&quot;name&quot;:&quot;Firebird&quot;,&quot;value&quot;:&quot;firebird&quot;},{&quot;name&quot;:&quot;ANSISQL&quot;,&quot;value&quot;:&quot;ansisql&quot;},{&quot;name&quot;:&quot;Generic&quot;,&quot;value&quot;:&quot;generic&quot;}],&quot;compatibilityTargetPlatform&quot;:&quot;impala&quot;,&quot;compatibilityTargetPlatforms&quot;:[{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;}],&quot;showOptimizer&quot;:false,&quot;wasBatchExecuted&quot;:false,&quot;isReady&quot;:true,&quot;lastExecuted&quot;:1500387564375,&quot;executingBlockingOperation&quot;:null,&quot;showLongOperationWarning&quot;:false,&quot;formatEnabled&quot;:true,&quot;isFetchingData&quot;:false,&quot;isCanceling&quot;:false}],&quot;selectedSnippet&quot;:&quot;impala&quot;,&quot;creatingSessionLocks&quot;:[],&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:${session_id}}],&quot;directoryUuid&quot;:&quot;&quot;,&quot;dependentsCoordinator&quot;:[],&quot;historyFilter&quot;:&quot;&quot;,&quot;historyFilterVisible&quot;:false,&quot;loadingHistory&quot;:false,&quot;historyCurrentPage&quot;:1,&quot;historyTotalPages&quot;:0,&quot;schedulerViewModel&quot;:null,&quot;schedulerViewModelIsLoaded&quot;:false,&quot;isBatchable&quot;:true,&quot;retryModalConfirm&quot;:null,&quot;retryModalCancel&quot;:null,&quot;unloaded&quot;:false,&quot;updateHistoryFailed&quot;:false,&quot;viewSchedulerId&quot;:&quot;&quot;,&quot;loadingScheduler&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;hive&quot;,&quot;status&quot;:&quot;running&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="notebook2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">notebook:{&quot;id&quot;:null,&quot;uuid&quot;:&quot;c702c6d8-6507-4af6-9a3e-76dd265b41ad&quot;,&quot;name&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;type&quot;:&quot;query-hive&quot;,&quot;coordinatorUuid&quot;:null,&quot;isHistory&quot;:false,&quot;isManaged&quot;:false,&quot;parentSavedQueryUuid&quot;:null,&quot;isSaved&quot;:false,&quot;onSuccessUrl&quot;:null,&quot;snippets&quot;:[{&quot;id&quot;:&quot;d1429293-ca29-3d00-1e33-e5f063956792&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;isBatchable&quot;:true,&quot;errors&quot;:[],&quot;aceErrorsHolder&quot;:[],&quot;aceWarningsHolder&quot;:[],&quot;aceErrors&quot;:[],&quot;aceWarnings&quot;:[],&quot;dbSelectionVisible&quot;:false,&quot;isSqlDialect&quot;:true,&quot;database&quot;:&quot;default&quot;,&quot;currentQueryTab&quot;:&quot;queryHistory&quot;,&quot;pinnedContextTabs&quot;:[],&quot;loadingQueries&quot;:false,&quot;queriesHasErrors&quot;:false,&quot;queriesCurrentPage&quot;:1,&quot;queriesTotalPages&quot;:1,&quot;queriesFilter&quot;:&quot;&quot;,&quot;queriesFilterVisible&quot;:false,&quot;statementType&quot;:&quot;text&quot;,&quot;statementTypes&quot;:[&quot;text&quot;,&quot;file&quot;],&quot;statementPath&quot;:&quot;&quot;,&quot;externalStatementLoaded&quot;:false,&quot;associatedDocumentLoading&quot;:true,&quot;associatedDocumentUuid&quot;:null,&quot;statement_raw&quot;:&quot;SELECT * FROM sample_07;&quot;,&quot;aceSize&quot;:100,&quot;status&quot;:&quot;running&quot;,&quot;statusForButtons&quot;:&quot;executing&quot;,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;viewSettings&quot;:{&quot;placeHolder&quot;:&quot;Example: SELECT * FROM tablename, or press CTRL + space&quot;,&quot;sqlDialect&quot;:true},&quot;variables&quot;:[],&quot;hasCurlyBracketParameters&quot;:true,&quot;variableNames&quot;:[],&quot;statement&quot;:&quot;SELECT * FROM sample_07;&quot;,&quot;result&quot;:{&quot;id&quot;:&quot;e07bff99-9d65-c1e9-562b-38debe1c7225&quot;,&quot;type&quot;:&quot;table&quot;,&quot;hasResultset&quot;:true,&quot;handle&quot;:{},&quot;meta&quot;:[],&quot;rows&quot;:null,&quot;hasMore&quot;:false,&quot;statement_id&quot;:0,&quot;statement_range&quot;:{&quot;start&quot;:{&quot;row&quot;:0,&quot;column&quot;:0},&quot;end&quot;:{&quot;row&quot;:0,&quot;column&quot;:0}},&quot;statements_count&quot;:1,&quot;previous_statement_hash&quot;:null,&quot;metaFilter&quot;:&quot;&quot;,&quot;isMetaFilterVisible&quot;:false,&quot;filteredMetaChecked&quot;:true,&quot;filteredMeta&quot;:[],&quot;fetchedOnce&quot;:false,&quot;startTime&quot;:&quot;2017-07-31T18:14:37.537Z&quot;,&quot;endTime&quot;:&quot;2017-07-31T18:14:37.537Z&quot;,&quot;executionTime&quot;:0,&quot;data&quot;:[],&quot;explanation&quot;:&quot;&quot;,&quot;logs&quot;:&quot;&quot;,&quot;logLines&quot;:0,&quot;hasSomeResults&quot;:false},&quot;showGrid&quot;:true,&quot;showChart&quot;:false,&quot;showLogs&quot;:false,&quot;progress&quot;:0,&quot;jobs&quot;:[],&quot;isLoading&quot;:false,&quot;resultsKlass&quot;:&quot;results impala&quot;,&quot;errorsKlass&quot;:&quot;results impala alert alert-error&quot;,&quot;is_redacted&quot;:false,&quot;chartType&quot;:&quot;bars&quot;,&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null,&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimits&quot;:[5,10,25,50,100],&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartData&quot;:[],&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;hasDataForChart&quot;:false,&quot;previousChartOptions&quot;:{&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null},&quot;isResultSettingsVisible&quot;:false,&quot;settingsVisible&quot;:false,&quot;checkStatusTimeout&quot;:null,&quot;topRisk&quot;:null,&quot;suggestion&quot;:&quot;&quot;,&quot;hasSuggestion&quot;:null,&quot;complexityCheckRunning&quot;:false,&quot;compatibilityCheckRunning&quot;:false,&quot;compatibilitySourcePlatform&quot;:&quot;impala&quot;,&quot;compatibilitySourcePlatforms&quot;:[{&quot;name&quot;:&quot;Teradata&quot;,&quot;value&quot;:&quot;teradata&quot;},{&quot;name&quot;:&quot;Oracle&quot;,&quot;value&quot;:&quot;oracle&quot;},{&quot;name&quot;:&quot;Netezza&quot;,&quot;value&quot;:&quot;netezza&quot;},{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;},{&quot;name&quot;:&quot;DB2&quot;,&quot;value&quot;:&quot;db2&quot;},{&quot;name&quot;:&quot;Greenplum&quot;,&quot;value&quot;:&quot;greenplum&quot;},{&quot;name&quot;:&quot;MySQL&quot;,&quot;value&quot;:&quot;mysql&quot;},{&quot;name&quot;:&quot;PostgreSQL&quot;,&quot;value&quot;:&quot;postgresql&quot;},{&quot;name&quot;:&quot;Informix&quot;,&quot;value&quot;:&quot;informix&quot;},{&quot;name&quot;:&quot;SQL Server&quot;,&quot;value&quot;:&quot;sqlserver&quot;},{&quot;name&quot;:&quot;Sybase&quot;,&quot;value&quot;:&quot;sybase&quot;},{&quot;name&quot;:&quot;Access&quot;,&quot;value&quot;:&quot;access&quot;},{&quot;name&quot;:&quot;Firebird&quot;,&quot;value&quot;:&quot;firebird&quot;},{&quot;name&quot;:&quot;ANSISQL&quot;,&quot;value&quot;:&quot;ansisql&quot;},{&quot;name&quot;:&quot;Generic&quot;,&quot;value&quot;:&quot;generic&quot;}],&quot;compatibilityTargetPlatform&quot;:&quot;impala&quot;,&quot;compatibilityTargetPlatforms&quot;:[{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;}],&quot;showOptimizer&quot;:false,&quot;wasBatchExecuted&quot;:false,&quot;isReady&quot;:true,&quot;lastExecuted&quot;:1501524877531,&quot;executingBlockingOperation&quot;:null,&quot;showLongOperationWarning&quot;:false,&quot;formatEnabled&quot;:true,&quot;isFetchingData&quot;:false,&quot;isCanceling&quot;:false}],&quot;selectedSnippet&quot;:&quot;impala&quot;,&quot;creatingSessionLocks&quot;:[],&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;https://anu-test-2.gce.cloudera.com:25000&quot;,&quot;id&quot;:14}],&quot;directoryUuid&quot;:&quot;&quot;,&quot;dependentsCoordinator&quot;:[],&quot;historyFilter&quot;:&quot;&quot;,&quot;historyFilterVisible&quot;:false,&quot;loadingHistory&quot;:false,&quot;historyCurrentPage&quot;:1,&quot;historyTotalPages&quot;:2,&quot;schedulerViewModel&quot;:null,&quot;schedulerViewModelIsLoaded&quot;:false,&quot;isBatchable&quot;:true,&quot;retryModalConfirm&quot;:null,&quot;retryModalCancel&quot;:null,&quot;unloaded&quot;:false,&quot;updateHistoryFailed&quot;:false,&quot;viewSchedulerId&quot;:&quot;&quot;,&quot;loadingScheduler&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">notebook2</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/execute/impala</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor/?type=impala</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">history_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.history_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">secret1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.handle.secret</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">session_guid1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.handle.session_guid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">previous_statement_hash</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.handle.previous_statement_hash</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">history_uuid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.history_uuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">secret</stringProp>
              <stringProp name="RegexExtractor.regex">([^=].*==)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">secret1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">session_guid</stringProp>
              <stringProp name="RegexExtractor.regex">([^=].*==)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">session_guid1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="192 /notebook/api/check_status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${history_id}&quot;,&quot;uuid&quot;:&quot;${history_uuid}&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;hive&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:&quot;${session_id}&quot;}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;hive&quot;,&quot;status&quot;:&quot;running&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;${secret}&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;${session_guid}&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;${secret}&quot;,&quot;previous_statement_hash&quot;:&quot;${previous_statement_hash}&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/check_status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="193 /notebook/api/get_logs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:${history_id},&quot;uuid&quot;:&quot;${history_uuid}&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;hive&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:${session_id}}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;hive&quot;,&quot;status&quot;:&quot;running&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;${secret}\n&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;${session_guid}\n&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;${secret}\n&quot;,&quot;previous_statement_hash&quot;:&quot;${previous_statement_hash}&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="from" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">from</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jobs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jobs</stringProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="full_log" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">full_log</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/get_logs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=11</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="194 /notebook/api/fetch_result_data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:${history_id},&quot;uuid&quot;:&quot;${history_uuid}&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;hive&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;${session_httpaddr}&quot;,&quot;id&quot;:${session_id}}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${snippet_value_id}&quot;,&quot;type&quot;:&quot;hive&quot;,&quot;status&quot;:&quot;available&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;${snippet_result_id}&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;${secret}&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;${session_guid}&quot;,&quot;statement&quot;:&quot;${SQLSTATEMENT}&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;${secret}&quot;,&quot;previous_statement_hash&quot;:&quot;${previous_statement_hash}&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rows" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rows</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOver" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startOver</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/fetch_result_data</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain, */*; q=0.01</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="198 /notebook/api/fetch_result_size" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:11,&quot;uuid&quot;:&quot;80eddb43-5641-4b3a-926c-cc4e74c0be14&quot;,&quot;isSaved&quot;:false,&quot;sessions&quot;:[{&quot;type&quot;:&quot;hive&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;http://nightly-unsecure-2.gce.cloudera.com:25000&quot;,&quot;id&quot;:2}],&quot;type&quot;:&quot;query-impala&quot;,&quot;name&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="snippet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">snippet</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;f1e587b7-a57d-fb14-920c-11172c9f07ad&quot;,&quot;type&quot;:&quot;hive&quot;,&quot;status&quot;:&quot;available&quot;,&quot;statementType&quot;:&quot;text&quot;,&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;statementPath&quot;:&quot;&quot;,&quot;associatedDocumentUuid&quot;:null,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;result&quot;:{&quot;id&quot;:&quot;ca7db390-ae64-137e-6c84-131aa7927d4a&quot;,&quot;type&quot;:&quot;table&quot;,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;ciQJ3bMlTnS3SvSo3WkjzQ==\n&quot;,&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;previous_statement_hash&quot;:&quot;653818656ec4474712cde06694880c2f7ba5e6147d84ebade7f91882&quot;}},&quot;database&quot;:&quot;default&quot;,&quot;wasBatchExecuted&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/fetch_result_size</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>true</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="199 /notebook/api/notebook/close" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="notebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">notebook</stringProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:11,&quot;uuid&quot;:&quot;80eddb43-5641-4b3a-926c-cc4e74c0be14&quot;,&quot;name&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;type&quot;:&quot;query-hive&quot;,&quot;coordinatorUuid&quot;:null,&quot;isHistory&quot;:true,&quot;isManaged&quot;:false,&quot;isSaved&quot;:false,&quot;onSuccessUrl&quot;:null,&quot;snippets&quot;:[{&quot;id&quot;:&quot;f1e587b7-a57d-fb14-920c-11172c9f07ad&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;impala&quot;,&quot;isBatchable&quot;:true,&quot;errors&quot;:[],&quot;aceErrorsHolder&quot;:[],&quot;aceWarningsHolder&quot;:[],&quot;aceErrors&quot;:[],&quot;aceWarnings&quot;:[],&quot;dbSelectionVisible&quot;:false,&quot;isSqlDialect&quot;:true,&quot;database&quot;:&quot;default&quot;,&quot;currentQueryTab&quot;:&quot;queryResults&quot;,&quot;pinnedContextTabs&quot;:[],&quot;loadingQueries&quot;:false,&quot;queriesHasErrors&quot;:false,&quot;queriesCurrentPage&quot;:1,&quot;queriesTotalPages&quot;:1,&quot;queriesFilter&quot;:&quot;&quot;,&quot;queriesFilterVisible&quot;:false,&quot;statementType&quot;:&quot;text&quot;,&quot;statementTypes&quot;:[&quot;text&quot;,&quot;file&quot;],&quot;statementPath&quot;:&quot;&quot;,&quot;externalStatementLoaded&quot;:false,&quot;associatedDocumentLoading&quot;:true,&quot;associatedDocumentUuid&quot;:null,&quot;statement_raw&quot;:&quot;SELECT * FROM customers&quot;,&quot;aceSize&quot;:100,&quot;status&quot;:&quot;available&quot;,&quot;statusForButtons&quot;:&quot;executed&quot;,&quot;properties&quot;:{&quot;settings&quot;:[]},&quot;viewSettings&quot;:{&quot;placeHolder&quot;:&quot;Example: SELECT * FROM tablename, or press CTRL + space&quot;,&quot;sqlDialect&quot;:true},&quot;variables&quot;:[],&quot;hasCurlyBracketParameters&quot;:true,&quot;variableNames&quot;:[],&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;result&quot;:{&quot;id&quot;:&quot;ca7db390-ae64-137e-6c84-131aa7927d4a&quot;,&quot;type&quot;:&quot;table&quot;,&quot;hasResultset&quot;:true,&quot;handle&quot;:{&quot;log_context&quot;:null,&quot;statements_count&quot;:1,&quot;end&quot;:{&quot;column&quot;:22,&quot;row&quot;:0},&quot;statement_id&quot;:0,&quot;has_more_statements&quot;:false,&quot;start&quot;:{&quot;column&quot;:0,&quot;row&quot;:0},&quot;secret&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;has_result_set&quot;:true,&quot;session_guid&quot;:&quot;ciQJ3bMlTnS3SvSo3WkjzQ==\n&quot;,&quot;statement&quot;:&quot;SELECT * FROM customers&quot;,&quot;operation_type&quot;:0,&quot;modified_row_count&quot;:null,&quot;guid&quot;:&quot;HNMdPf6LTBsAAAAAFlAu3w==\n&quot;,&quot;previous_statement_hash&quot;:&quot;653818656ec4474712cde06694880c2f7ba5e6147d84ebade7f91882&quot;},&quot;meta&quot;:[{&quot;type&quot;:&quot;INT_TYPE&quot;,&quot;name&quot;:&quot;&quot;,&quot;comment&quot;:null,&quot;cssClass&quot;:&quot;sort-numeric&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:0},{&quot;comment&quot;:null,&quot;type&quot;:&quot;INT_TYPE&quot;,&quot;name&quot;:&quot;id&quot;,&quot;cssClass&quot;:&quot;sort-numeric&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:1},{&quot;comment&quot;:null,&quot;type&quot;:&quot;STRING_TYPE&quot;,&quot;name&quot;:&quot;name&quot;,&quot;cssClass&quot;:&quot;sort-string&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:2}],&quot;rows&quot;:53,&quot;hasMore&quot;:false,&quot;statement_id&quot;:0,&quot;statement_range&quot;:{&quot;start&quot;:{&quot;row&quot;:0,&quot;column&quot;:0},&quot;end&quot;:{&quot;row&quot;:0,&quot;column&quot;:0}},&quot;statements_count&quot;:1,&quot;metaFilter&quot;:&quot;&quot;,&quot;isMetaFilterVisible&quot;:false,&quot;filteredMetaChecked&quot;:true,&quot;filteredMeta&quot;:[{&quot;comment&quot;:null,&quot;type&quot;:&quot;INT_TYPE&quot;,&quot;name&quot;:&quot;id&quot;,&quot;cssClass&quot;:&quot;sort-numeric&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:1},{&quot;comment&quot;:null,&quot;type&quot;:&quot;STRING_TYPE&quot;,&quot;name&quot;:&quot;name&quot;,&quot;cssClass&quot;:&quot;sort-string&quot;,&quot;checked&quot;:true,&quot;originalIndex&quot;:2}],&quot;fetchedOnce&quot;:true,&quot;startTime&quot;:&quot;2017-07-16T23:27:51.795Z&quot;,&quot;endTime&quot;:&quot;2017-07-16T23:27:51.796Z&quot;,&quot;executionTime&quot;:1,&quot;data&quot;:[[1,75012,&quot;Dorothy&amp;nbsp;Wilk&quot;],[2,17254,&quot;Martin&amp;nbsp;Johnson&quot;],[3,12532,&quot;Melvin&amp;nbsp;Garcia&quot;],[4,42632,&quot;Raymond&amp;nbsp;S.&amp;nbsp;Vestal&quot;],[5,77913,&quot;Betty&amp;nbsp;J.&amp;nbsp;Giambrone&quot;],[6,38807,&quot;Rebecca&amp;nbsp;T.&amp;nbsp;Johnson&quot;],[7,71843,&quot;David&amp;nbsp;B.&amp;nbsp;Allison&quot;],[8,67099,&quot;Jay&amp;nbsp;N.&amp;nbsp;Weaver&quot;],[9,83510,&quot;Carol&amp;nbsp;B.&amp;nbsp;Houser&quot;],[10,48072,&quot;Octaviana&amp;nbsp;Guiterrez&quot;],[11,89830,&quot;Michelle&amp;nbsp;Coffman&quot;],[12,98751,&quot;Heather&amp;nbsp;L.&amp;nbsp;Southerland&quot;],[13,88702,&quot;Diane&amp;nbsp;Lee&quot;],[14,80283,&quot;Angela&amp;nbsp;Perez&quot;],[15,48153,&quot;Caroline&amp;nbsp;R.&amp;nbsp;Ehlert&quot;],[16,54362,&quot;David&amp;nbsp;Hallifax&quot;],[17,10326,&quot;Annie&amp;nbsp;Sanchez&quot;],[18,13106,&quot;Lindsey&amp;nbsp;Jarrett&quot;],[19,90326,&quot;Alyssa&amp;nbsp;R.&amp;nbsp;Banks&quot;],[20,69735,&quot;Tracy&amp;nbsp;Wong&quot;],[21,54288,&quot;Julia&amp;nbsp;Allen&quot;],[22,94802,&quot;William&amp;nbsp;S.&amp;nbsp;Pollard&quot;],[23,17307,&quot;Mohammed&amp;nbsp;B.&amp;nbsp;Sanderlin&quot;],[24,74640,&quot;Kenneth&amp;nbsp;E.&amp;nbsp;Pendelton&quot;],[25,54954,&quot;Michael&amp;nbsp;Carnes&quot;],[26,93508,&quot;Olivia&amp;nbsp;Powers&quot;],[27,35241,&quot;Craig&amp;nbsp;S.&amp;nbsp;Motley&quot;],[28,63835,&quot;Adolfo&amp;nbsp;A.&amp;nbsp;Lieb&quot;],[29,63705,&quot;Meghan&amp;nbsp;Dickinson&quot;],[30,42109,&quot;Pamela&amp;nbsp;C.&amp;nbsp;McMillan&quot;],[31,76678,&quot;Raymond&amp;nbsp;K.&amp;nbsp;Long&quot;],[32,70420,&quot;Terri&amp;nbsp;W.&amp;nbsp;Katz&quot;],[33,64109,&quot;Jo&amp;nbsp;Walsh&quot;],[34,38715,&quot;Mary&amp;nbsp;M.&amp;nbsp;Henderson&quot;],[35,66109,&quot;Gilberto&amp;nbsp;Franklin&quot;],[36,62346,&quot;Jeanetta&amp;nbsp;Aquino&quot;],[37,10271,&quot;Eric&amp;nbsp;Cobb&quot;],[38,79468,&quot;John&amp;nbsp;Healy&quot;],[39,72104,&quot;Andrew&amp;nbsp;Wyatt&quot;],[40,21216,&quot;Elda&amp;nbsp;Fanning&quot;],[41,71267,&quot;Robin&amp;nbsp;T.&amp;nbsp;Vanauken&quot;],[42,17296,&quot;Michael&amp;nbsp;B.&amp;nbsp;Hill&quot;],[43,31457,&quot;David&amp;nbsp;Bryant&quot;],[44,77672,&quot;Randy&amp;nbsp;Peterson&quot;],[45,82429,&quot;Justine&amp;nbsp;Roth&quot;],[46,86050,&quot;Sheera&amp;nbsp;McNeil&quot;],[47,71230,&quot;Alicia&amp;nbsp;C.&amp;nbsp;Torrence&quot;],[48,84324,&quot;Mae&amp;nbsp;White&quot;],[49,36656,&quot;Anthony&amp;nbsp;A.&amp;nbsp;Davis&quot;],[50,91215,&quot;Richard&amp;nbsp;Baird&quot;],[51,68381,&quot;Beatrice&amp;nbsp;Goodwin&quot;],[52,50951,&quot;Elaine&amp;nbsp;Meikle&quot;],[53,36925,&quot;Maria&amp;nbsp;Calderon&quot;]],&quot;explanation&quot;:&quot;&quot;,&quot;logs&quot;:&quot;Query 1b4c8bfe3d1dd31c:df2e501600000000 100% Complete (1 out of 1)&quot;,&quot;logLines&quot;:1,&quot;hasSomeResults&quot;:true},&quot;showGrid&quot;:true,&quot;showChart&quot;:false,&quot;showLogs&quot;:false,&quot;progress&quot;:0,&quot;jobs&quot;:[],&quot;isLoading&quot;:false,&quot;resultsKlass&quot;:&quot;results impala&quot;,&quot;errorsKlass&quot;:&quot;results impala alert alert-error&quot;,&quot;is_redacted&quot;:false,&quot;chartType&quot;:&quot;bars&quot;,&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null,&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimits&quot;:[5,10,25,50,100],&quot;chartLimit&quot;:null,&quot;chartX&quot;:&quot;name&quot;,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartYMulti&quot;:[&quot;id&quot;],&quot;chartData&quot;:[],&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;hasDataForChart&quot;:true,&quot;previousChartOptions&quot;:{&quot;chartScope&quot;:&quot;world&quot;,&quot;chartTimelineType&quot;:&quot;bar&quot;,&quot;chartLimit&quot;:null,&quot;chartX&quot;:null,&quot;chartXPivot&quot;:null,&quot;chartYSingle&quot;:null,&quot;chartMapType&quot;:&quot;marker&quot;,&quot;chartMapLabel&quot;:null,&quot;chartMapHeat&quot;:null,&quot;chartYMulti&quot;:[],&quot;chartSorting&quot;:&quot;none&quot;,&quot;chartScatterGroup&quot;:null,&quot;chartScatterSize&quot;:null},&quot;isResultSettingsVisible&quot;:false,&quot;settingsVisible&quot;:false,&quot;checkStatusTimeout&quot;:null,&quot;topRisk&quot;:null,&quot;suggestion&quot;:&quot;&quot;,&quot;hasSuggestion&quot;:null,&quot;complexityCheckRunning&quot;:false,&quot;compatibilityCheckRunning&quot;:false,&quot;compatibilitySourcePlatform&quot;:&quot;impala&quot;,&quot;compatibilitySourcePlatforms&quot;:[{&quot;name&quot;:&quot;Teradata&quot;,&quot;value&quot;:&quot;teradata&quot;},{&quot;name&quot;:&quot;Oracle&quot;,&quot;value&quot;:&quot;oracle&quot;},{&quot;name&quot;:&quot;Netezza&quot;,&quot;value&quot;:&quot;netezza&quot;},{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;},{&quot;name&quot;:&quot;DB2&quot;,&quot;value&quot;:&quot;db2&quot;},{&quot;name&quot;:&quot;Greenplum&quot;,&quot;value&quot;:&quot;greenplum&quot;},{&quot;name&quot;:&quot;MySQL&quot;,&quot;value&quot;:&quot;mysql&quot;},{&quot;name&quot;:&quot;PostgreSQL&quot;,&quot;value&quot;:&quot;postgresql&quot;},{&quot;name&quot;:&quot;Informix&quot;,&quot;value&quot;:&quot;informix&quot;},{&quot;name&quot;:&quot;SQL Server&quot;,&quot;value&quot;:&quot;sqlserver&quot;},{&quot;name&quot;:&quot;Sybase&quot;,&quot;value&quot;:&quot;sybase&quot;},{&quot;name&quot;:&quot;Access&quot;,&quot;value&quot;:&quot;access&quot;},{&quot;name&quot;:&quot;Firebird&quot;,&quot;value&quot;:&quot;firebird&quot;},{&quot;name&quot;:&quot;ANSISQL&quot;,&quot;value&quot;:&quot;ansisql&quot;},{&quot;name&quot;:&quot;Generic&quot;,&quot;value&quot;:&quot;generic&quot;}],&quot;compatibilityTargetPlatform&quot;:&quot;impala&quot;,&quot;compatibilityTargetPlatforms&quot;:[{&quot;name&quot;:&quot;Impala&quot;,&quot;value&quot;:&quot;impala&quot;},{&quot;name&quot;:&quot;Hive&quot;,&quot;value&quot;:&quot;hive&quot;}],&quot;showOptimizer&quot;:false,&quot;wasBatchExecuted&quot;:false,&quot;isReady&quot;:true,&quot;lastExecuted&quot;:1500247671767,&quot;executingBlockingOperation&quot;:null,&quot;showLongOperationWarning&quot;:false,&quot;formatEnabled&quot;:true,&quot;isFetchingData&quot;:false,&quot;isCanceling&quot;:false}],&quot;selectedSnippet&quot;:&quot;impala&quot;,&quot;creatingSessionLocks&quot;:[],&quot;sessions&quot;:[{&quot;type&quot;:&quot;impala&quot;,&quot;properties&quot;:[{&quot;nice_name&quot;:&quot;Settings&quot;,&quot;multiple&quot;:true,&quot;key&quot;:&quot;settings&quot;,&quot;help_text&quot;:&quot;Impala configuration properties.&quot;,&quot;defaultValue&quot;:[],&quot;type&quot;:&quot;settings&quot;,&quot;options&quot;:[&quot;debug_action&quot;,&quot;explain_level&quot;,&quot;mem_limit&quot;,&quot;optimize_partition_key_scans&quot;,&quot;query_timeout_s&quot;,&quot;request_pool&quot;],&quot;value&quot;:[]}],&quot;http_addr&quot;:&quot;http://nightly-unsecure-2.gce.cloudera.com:25000&quot;,&quot;id&quot;:2}],&quot;directoryUuid&quot;:&quot;&quot;,&quot;dependentsCoordinator&quot;:[],&quot;historyFilter&quot;:&quot;&quot;,&quot;historyFilterVisible&quot;:false,&quot;loadingHistory&quot;:false,&quot;historyCurrentPage&quot;:1,&quot;historyTotalPages&quot;:1,&quot;schedulerViewModel&quot;:null,&quot;schedulerViewModelIsLoaded&quot;:false,&quot;isBatchable&quot;:true,&quot;retryModalConfirm&quot;:null,&quot;retryModalCancel&quot;:null,&quot;unloaded&quot;:false,&quot;updateHistoryFailed&quot;:false,&quot;viewSchedulerId&quot;:&quot;&quot;,&quot;loadingScheduler&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="editorMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">editorMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/notebook/api/notebook/close</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${PROT}://${HOST}:${PORT}/hue/editor?editor=${history_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="X-CSRFToken" elementType="Header">
                  <stringProp name="Header.name">X-CSRFToken</stringProp>
                  <stringProp name="Header.value">${COOKIE_csrftoken}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Users CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${USERSFILE}</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">user,password</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="IP Addr Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${IPSFILE}</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">ADR_IP</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501191526000</longProp>
        <longProp name="ThreadGroup.end_time">1501191526000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">8080</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="-2063843150">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2)</stringProp>
          <stringProp name="0"></stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">true</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="748 /success.txt" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/success.txt</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
